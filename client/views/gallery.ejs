<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <meta name="description" content="<%= description %>">
    <meta name="keywords" content="AQUA, meme gallery, crypto memes, SUI network, community memes, viral memes, blockchain humor, cryptocurrency memes, soggy cat memes, AI generated memes, user created content">
    <meta name="author" content="AQUA Team">
    <link rel="canonical" href="<%= canonicalUrl %>">
    <link rel="icon" type="image/png" href="/aquacat.png">
    
    <!-- Open Graph Meta Tags -->
    <meta property="og:title" content="<%= title %>">
    <meta property="og:description" content="<%= description %>">
    <meta property="og:image" content="<%= ogImage %>">
    <meta property="og:url" content="<%= canonicalUrl %>">
    <meta property="og:type" content="website">
    <meta property="og:site_name" content="AQUA">
    
    <!-- Twitter Card Meta Tags -->
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="<%= title %>">
    <meta name="twitter:description" content="<%= description %>">
    <meta name="twitter:image" content="<%= ogImage %>">
    <meta name="twitter:site" content="@AQUA_on_SUI">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="/css/style.css?v=2.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
        .gallery-container {
            min-height: 100vh;
            padding-top: 100px;
            padding-bottom: 50px;
        }
        
        .gallery-hero {
            text-align: center;
            margin-bottom: 50px;
        }
        
        .gallery-hero h1 {
            font-family: 'Fredoka One', cursive;
            font-size: 3.5rem;
            margin-bottom: 20px;
            background: linear-gradient(45deg, var(--main-blue), var(--anim-light));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* Stats Overview */
        .stats-overview {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: linear-gradient(145deg, var(--accent-dark), #03223f);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            border: 1px solid rgba(77, 162, 255, 0.2);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--main-blue);
            margin-bottom: 10px;
        }

        .stat-label {
            font-size: 1rem;
            opacity: 0.8;
        }

        /* Gallery Controls */
        .gallery-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .filter-controls {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 8px 16px;
            background: rgba(77, 162, 255, 0.1);
            border: 1px solid rgba(77, 162, 255, 0.3);
            border-radius: 20px;
            color: var(--main-blue);
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
            text-decoration: none;
        }

        .filter-btn:hover, .filter-btn.active {
            background: var(--main-blue);
            color: white;
            text-decoration: none;
        }

        .sort-controls select {
            padding: 8px 15px;
            background: rgba(77, 162, 255, 0.1);
            border: 1px solid rgba(77, 162, 255, 0.3);
            border-radius: 10px;
            color: var(--main-blue);
            font-size: 0.9rem;
        }

        .search-bar {
            position: relative;
            max-width: 300px;
        }

        .search-bar input {
            width: 100%;
            padding: 10px 40px 10px 15px;
            background: rgba(77, 162, 255, 0.1);
            border: 1px solid rgba(77, 162, 255, 0.3);
            border-radius: 25px;
            color: var(--main-blue);
            font-size: 0.9rem;
        }

        .search-bar .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--main-blue);
            cursor: pointer;
        }

        /* Gallery Tabs */
        .gallery-tabs {
            display: flex;
            gap: 20px;
            margin-bottom: 30px;
            border-bottom: 1px solid rgba(77, 162, 255, 0.2);
        }

        .tab-btn {
            padding: 10px 20px;
            background: none;
            border: none;
            color: var(--main-blue);
            cursor: pointer;
            font-size: 1rem;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            border-bottom-color: var(--main-blue);
            font-weight: 600;
        }

        /* Gallery Grid */
        .gallery-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
            gap: 25px;
            margin-bottom: 50px;
        }

        .meme-card {
            background: linear-gradient(145deg, var(--accent-dark), #03223f);
            border-radius: 15px;
            overflow: hidden;
            border: 1px solid rgba(77, 162, 255, 0.2);
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .meme-card:hover {
            transform: translateY(-5px);
            border-color: var(--main-blue);
            box-shadow: 0 10px 25px rgba(77, 162, 255, 0.3);
        }

        .meme-image {
            width: 100%;
            aspect-ratio: 1 / 1;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .meme-card:hover .meme-image {
            transform: scale(1.05);
        }

        .meme-info {
            padding: 20px;
        }

        .meme-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--main-blue);
            margin-bottom: 10px;
            line-height: 1.3;
        }

        .meme-meta {
            font-size: 0.8rem;
            opacity: 0.7;
            margin-bottom: 10px;
        }

        .meme-stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 0.9rem;
            opacity: 0.8;
        }

        .meme-actions {
            display: flex;
            gap: 10px;
        }

        .action-btn {
            flex: 1;
            padding: 8px 12px;
            background: rgba(77, 162, 255, 0.1);
            border: 1px solid rgba(77, 162, 255, 0.3);
            border-radius: 8px;
            color: var(--main-blue);
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            text-decoration: none;
        }

        .action-btn:hover {
            background: var(--main-blue);
            color: white;
            text-decoration: none;
        }

        .action-btn.remix-btn {
            background: rgba(255, 165, 0, 0.1);
            border-color: rgba(255, 165, 0, 0.3);
            color: #FFA500;
        }

        .action-btn.remix-btn:hover {
            background: #FFA500;
            color: white;
        }

        .original-badge {
            display: inline-block;
            background: rgba(0, 255, 127, 0.2);
            color: #00FF7F;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .remix-badge {
            display: inline-block;
            background: rgba(255, 165, 0, 0.2);
            color: #FFA500;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            position: relative;
            margin: 5% auto;
            width: 90%;
            max-width: 800px;
            background: linear-gradient(145deg, var(--accent-dark), #03223f);
            border-radius: 20px;
            border: 1px solid rgba(77, 162, 255, 0.3);
            overflow: hidden;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px;
            border-bottom: 1px solid rgba(77, 162, 255, 0.2);
        }

        .modal-close {
            font-size: 2rem;
            color: var(--main-blue);
            cursor: pointer;
            line-height: 1;
        }

        .modal-body {
            padding: 20px;
        }

        .modal-image {
            width: 100%;
            max-height: 400px;
            object-fit: contain;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        /* Loading States */
        .loading {
            text-align: center;
            padding: 40px;
            color: var(--main-blue);
        }

        .loading i {
            font-size: 2rem;
            animation: spin 1s linear infinite;
            margin-bottom: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Pagination */
        .pagination {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-top: 40px;
        }

        .page-btn {
            padding: 10px 15px;
            background: rgba(77, 162, 255, 0.1);
            border: 1px solid rgba(77, 162, 255, 0.3);
            border-radius: 8px;
            color: var(--main-blue);
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .page-btn:hover, .page-btn.active {
            background: var(--main-blue);
            color: white;
            text-decoration: none;
        }

        .page-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .gallery-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .filter-controls {
                justify-content: center;
            }
            
            .gallery-grid {
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 20px;
            }
            
            .modal-content {
                width: 95%;
                margin: 10% auto;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <nav>
                <a href="/" class="nav-logo">AQUA</a>
                <ul class="nav-links">
                    <li><a href="/">Home</a></li>
                    <li><a href="/meme-generator">Meme Generator</a></li>
                    <li><a href="/gallery" class="active">Gallery</a></li>
                </ul>
            </nav>
        </div>
    </header>

    <main class="gallery-container">
        <div class="container">
            <div class="gallery-hero scroll-animate">
                <h1>AQUA Meme Gallery</h1>
                <p>Discover the funniest community-created memes featuring our soggy mascot!</p>
            </div>

            <!-- Gallery Statistics -->
            <div id="statsOverview" class="stats-overview scroll-animate">
                <div class="stat-card">
                    <div class="stat-number" id="totalMemes">-</div>
                    <div class="stat-label">Total Memes</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalLikes">-</div>
                    <div class="stat-label">Total Likes</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="totalShares">-</div>
                    <div class="stat-label">Total Shares</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number" id="createdToday">-</div>
                    <div class="stat-label">Created Today</div>
                </div>
            </div>

            <!-- Gallery Tabs -->
            <div class="gallery-tabs scroll-animate">
                <button class="tab-btn active" data-tab="all">All Memes</button>
                <button class="tab-btn" data-tab="remixable">Remix Gallery</button>
            </div>

            <!-- Gallery Controls -->
            <div class="gallery-controls scroll-animate">
                <div class="filter-controls">
                    <div class="filter-btn active" data-category="all">All</div>
                    <div class="filter-btn" data-category="funny">Funny</div>
                    <div class="filter-btn" data-category="crypto">Crypto</div>
                    <div class="filter-btn" data-category="ai-generated">AI Generated</div>
                    <div class="filter-btn" data-category="classic">Classic</div>
                    <div class="filter-btn" data-category="weather">Weather</div>
                </div>
                
                <div class="sort-controls">
                    <select id="sortBy">
                        <option value="newest">Newest</option>
                        <option value="popular">Most Popular</option>
                        <option value="trending">Trending</option>
                        <option value="most-viewed">Most Viewed</option>
                        <option value="most-remixed">Most Remixed</option>
                    </select>
                </div>

                <div class="search-bar">
                    <input type="text" id="searchInput" placeholder="Search memes...">
                    <i class="fas fa-search search-icon" onclick="searchMemes()"></i>
                </div>
            </div>

            <!-- Gallery Grid -->
            <div id="galleryGrid" class="gallery-grid scroll-animate">
                <div class="loading">
                    <i class="fas fa-spinner"></i>
                    <p>Loading awesome memes...</p>
                </div>
            </div>

            <!-- Pagination -->
            <div id="pagination" class="pagination" style="display: none;"></div>
        </div>
    </main>

    <!-- Meme Detail Modal -->
    <div id="memeModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2 id="modalTitle">Meme Details</h2>
                <span class="modal-close">&times;</span>
            </div>
            <div class="modal-body">
                <img id="modalImage" class="modal-image" src="" alt="Meme">
                <div id="modalInfo">
                    <div class="meme-stats">
                        <span><i class="fas fa-heart"></i> <span id="modalLikes">0</span></span>
                        <span><i class="fas fa-share"></i> <span id="modalShares">0</span></span>
                        <span><i class="fas fa-eye"></i> <span id="modalViews">0</span></span>
                    </div>
                    <div class="meme-actions">
                        <button class="action-btn" onclick="likeMeme(currentMemeId)">
                            <i class="fas fa-heart"></i> Like
                        </button>
                        <button class="action-btn" onclick="shareMeme(currentMemeId)">
                            <i class="fas fa-share"></i> Share
                        </button>
                        <button class="action-btn remix-btn" onclick="useOriginalImage(currentMemeId)" id="remixButton" style="display: none;">
                            <i class="fas fa-paint-brush"></i> Use Original
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <footer>
        <div class="container">
            <div class="social-links">
                <a href="https://x.com/AQUA_on_SUI" target="_blank" aria-label="Twitter"><i class="fab fa-twitter"></i></a>
                <a href="https://t.me/AQUA_CAT_ON_SUI" target="_blank" aria-label="Telegram"><i class="fab fa-telegram"></i></a>
                <a href="https://dexscreener.com/" target="_blank" aria-label="Dexscreener"><i class="fas fa-chart-line"></i></a>
            </div>
            <p class="disclaimer">
                <strong>Disclaimer:</strong> AQUA is a meme coin with no intrinsic value or expectation of financial return. It is for entertainment purposes only. Always do your own research.
            </p>
        </div>
    </footer>

    <script src="/js/script.js?v=2.0"></script>
    <script>
        let currentPage = 1;
        let currentCategory = 'all';
        let currentSort = 'newest';
        let currentMemeId = null;
        let currentTab = 'all'; // 'all' or 'remixable'

        // Initialize gallery
        document.addEventListener('DOMContentLoaded', function() {
            loadGalleryStats();
            loadGallery();
            initializeEventListeners();
        });

        function initializeEventListeners() {
            // Tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentTab = this.dataset.tab;
                    currentPage = 1;
                    loadGallery();
                });
            });

            // Filter buttons
            document.querySelectorAll('.filter-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    currentCategory = this.dataset.category;
                    currentPage = 1;
                    loadGallery();
                });
            });

            // Sort dropdown
            document.getElementById('sortBy').addEventListener('change', function() {
                currentSort = this.value;
                currentPage = 1;
                loadGallery();
            });

            // Search input
            document.getElementById('searchInput').addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    searchMemes();
                }
            });

            // Modal close
            document.querySelector('.modal-close').addEventListener('click', function() {
                document.getElementById('memeModal').style.display = 'none';
            });

            // Close modal on outside click
            window.addEventListener('click', function(event) {
                const modal = document.getElementById('memeModal');
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }

        async function loadGalleryStats() {
            try {
                const response = await fetch('/api/gallery/stats');
                const data = await response.json();

                if (data.success) {
                    document.getElementById('totalMemes').textContent = data.stats.totalMemes.toLocaleString();
                    document.getElementById('totalLikes').textContent = data.stats.totalLikes.toLocaleString();
                    document.getElementById('totalShares').textContent = data.stats.totalShares.toLocaleString();
                    document.getElementById('createdToday').textContent = data.stats.createdToday;
                }
            } catch (error) {
                console.error('Error loading gallery stats:', error);
            }
        }

        async function loadGallery() {
            const grid = document.getElementById('galleryGrid');
            grid.innerHTML = '<div class="loading"><i class="fas fa-spinner"></i><p>Loading memes...</p></div>';

            try {
                let endpoint = '/api/gallery';
                if (currentTab === 'remixable') {
                    endpoint = '/api/gallery/remixable';
                }

                const params = new URLSearchParams({
                    page: currentPage,
                    limit: 12
                });

                if (currentTab === 'all') {
                    params.append('category', currentCategory);
                    params.append('sortBy', currentSort);
                } else {
                    params.append('sortBy', currentSort);
                }

                const response = await fetch(`${endpoint}?${params}`);
                const data = await response.json();

                if (data.success) {
                    displayMemes(data.memes || data.images);
                    displayPagination(data.pagination);
                } else {
                    grid.innerHTML = '<div class="loading"><p>Failed to load memes</p></div>';
                }
            } catch (error) {
                console.error('Error loading gallery:', error);
                grid.innerHTML = '<div class="loading"><p>Error loading memes</p></div>';
            }
        }

        function displayMemes(memes) {
            const grid = document.getElementById('galleryGrid');
            
            if (memes.length === 0) {
                grid.innerHTML = '<div class="loading"><p>No memes found. Be the first to create one!</p></div>';
                return;
            }

            grid.innerHTML = memes.map(meme => {
                const isOriginal = meme.isRemixable && (meme.generationType === 'ai' || meme.generationType === 'upload');
                const isRemix = meme.generationType === 'remix';
                const badge = isOriginal ? '<div class="original-badge">Original</div>' : 
                             isRemix ? '<div class="remix-badge">Remix</div>' : '';
                
                const title = getTitleFromTextElements(meme.textElements) || 
                             (meme.aiPrompt ? meme.aiPrompt.substring(0, 30) + '...' : 'Untitled Meme');

                const metaInfo = isOriginal ? 
                    `${meme.generationType.toUpperCase()} • Remixed ${meme.timesRemixed || 0} times` :
                    `${meme.generationType.toUpperCase()} • ${formatDate(meme.createdAt)}`;

                const useOriginalBtn = isOriginal ? 
                    `<a href="/meme-generator?remix=${meme.id}" class="action-btn remix-btn">
                        <i class="fas fa-paint-brush"></i> Use Original
                    </a>` : '';

                return `
                    <div class="meme-card" onclick="openMemeModal('${meme.id}')">
                        <img src="${meme.thumbnail}" alt="Meme" class="meme-image" loading="lazy">
                        <div class="meme-info">
                            ${badge}
                            <div class="meme-title">${title}</div>
                            <div class="meme-meta">${metaInfo}</div>
                            <div class="meme-stats">
                                <span><i class="fas fa-heart"></i> ${meme.likes || 0}</span>
                                <span><i class="fas fa-share"></i> ${meme.shareCount || 0}</span>
                                <span><i class="fas fa-eye"></i> ${meme.views || 0}</span>
                            </div>
                            <div class="meme-actions" onclick="event.stopPropagation()">
                                <div class="action-btn" onclick="likeMeme('${meme.id}')">
                                    <i class="fas fa-heart"></i> Like
                                </div>
                                ${useOriginalBtn}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        function displayPagination(pagination) {
            const paginationDiv = document.getElementById('pagination');
            
            if (pagination.totalPages <= 1) {
                paginationDiv.style.display = 'none';
                return;
            }

            paginationDiv.style.display = 'flex';
            
            let paginationHTML = '';
            
            // Previous button
            if (pagination.hasPrev) {
                paginationHTML += `<div class="page-btn" onclick="changePage(${pagination.currentPage - 1})">Previous</div>`;
            }
            
            // Page numbers
            for (let i = Math.max(1, pagination.currentPage - 2); i <= Math.min(pagination.totalPages, pagination.currentPage + 2); i++) {
                paginationHTML += `<div class="page-btn ${i === pagination.currentPage ? 'active' : ''}" onclick="changePage(${i})">${i}</div>`;
            }
            
            // Next button
            if (pagination.hasNext) {
                paginationHTML += `<div class="page-btn" onclick="changePage(${pagination.currentPage + 1})">Next</div>`;
            }
            
            paginationDiv.innerHTML = paginationHTML;
        }

        function changePage(page) {
            currentPage = page;
            loadGallery();
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }

        async function openMemeModal(memeId) {
            try {
                const response = await fetch(`/api/memes/${memeId}`);
                const data = await response.json();

                if (data.success) {
                    const meme = data.meme;
                    currentMemeId = memeId;

                    document.getElementById('modalTitle').textContent = getTitleFromTextElements(meme.textElements) || 'Untitled Meme';
                    document.getElementById('modalImage').src = meme.finalMemeUrl;
                    document.getElementById('modalLikes').textContent = meme.likes || 0;
                    document.getElementById('modalShares').textContent = meme.shareCount || 0;
                    document.getElementById('modalViews').textContent = meme.views || 0;

                    // Show/hide remix button based on if it's an original image
                    const remixButton = document.getElementById('remixButton');
                    if (meme.isRemixable && (meme.generationType === 'ai' || meme.generationType === 'upload')) {
                        remixButton.style.display = 'block';
                        remixButton.onclick = () => useOriginalImage(memeId);
                    } else {
                        remixButton.style.display = 'none';
                    }

                    // Increment view count
                    fetch(`/api/memes/${memeId}/view`, { method: 'POST' });

                    document.getElementById('memeModal').style.display = 'block';
                }
            } catch (error) {
                console.error('Error loading meme details:', error);
            }
        }

        async function likeMeme(memeId) {
            try {
                const response = await fetch(`/api/memes/${memeId}/like`, { method: 'PUT' });
                const data = await response.json();
                
                if (data.success) {
                    // Update UI
                    const likeElements = document.querySelectorAll(`[onclick*="${memeId}"]`);
                    likeElements.forEach(el => {
                        const likeSpan = el.closest('.meme-card, .modal-body').querySelector('.fas.fa-heart').parentNode;
                        if (likeSpan) likeSpan.innerHTML = `<i class="fas fa-heart"></i> ${data.likes}`;
                    });
                    
                    // Update modal if open
                    if (currentMemeId === memeId) {
                        document.getElementById('modalLikes').textContent = data.likes;
                    }
                }
            } catch (error) {
                console.error('Error liking meme:', error);
            }
        }

        function useOriginalImage(memeId) {
            // Redirect to meme generator with the original image
            window.location.href = `/meme-generator?remix=${memeId}`;
        }

        async function shareMeme(memeId) {
            try {
                const response = await fetch(`/api/social/share`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        memeId: memeId,
                        platform: 'twitter',
                        text: 'Check out this hilarious AQUA meme!'
                    })
                });

                const data = await response.json();
                if (data.success && data.shareUrl) {
                    window.open(data.shareUrl, '_blank');
                }
            } catch (error) {
                console.error('Error sharing meme:', error);
            }
        }

        async function searchMemes() {
            const query = document.getElementById('searchInput').value.trim();
            if (!query) {
                loadGallery();
                return;
            }

            const grid = document.getElementById('galleryGrid');
            grid.innerHTML = '<div class="loading"><i class="fas fa-spinner"></i><p>Searching...</p></div>';

            try {
                const response = await fetch('/api/gallery/search', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        query: query,
                        category: currentCategory,
                        page: 1,
                        limit: 12
                    })
                });

                const data = await response.json();
                if (data.success) {
                    displayMemes(data.memes);
                    displayPagination(data.pagination);
                } else {
                    grid.innerHTML = '<div class="loading"><p>Search failed</p></div>';
                }
            } catch (error) {
                console.error('Error searching:', error);
                grid.innerHTML = '<div class="loading"><p>Search error</p></div>';
            }
        }

        function getTitleFromTextElements(textElements) {
            if (!textElements || textElements.length === 0) return null;
            return textElements[0].text.substring(0, 40) + (textElements[0].text.length > 40 ? '...' : '');
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString();
        }

        // Initialize scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('in-view');
                }
            });
        }, observerOptions);

        document.querySelectorAll('.scroll-animate').forEach(el => {
            observer.observe(el);
        });
    </script>
</body>
</html> 